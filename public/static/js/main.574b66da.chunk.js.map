{"version":3,"sources":["serviceWorker.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","util/MyPopup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","console","log","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.574b66da.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem('jwtToken', userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem('jwtToken');\n    dispatch({ type: 'LOGOUT' });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React, { useContext, useState } from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathname = window.location.pathname;\n\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const menuBar = user ? (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={logout} />\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item\n        name=\"home\"\n        active={activeItem === 'home'}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"login\"\n          active={activeItem === 'login'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/login\"\n        />\n        <Menu.Item\n          name=\"register\"\n          active={activeItem === 'register'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n\n  return menuBar;\n}\n\nexport default MenuBar;\n","import { Popup } from 'semantic-ui-react';\nimport React from 'react';\n\nfunction MyPopup({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default MyPopup;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { Button, Label, Icon } from 'semantic-ui-react';\n\nimport MyPopup from '../util/MyPopup';\n\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, likes]);\n\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: id }\n  });\n\n  const likeButton = user ? (\n    liked ? (\n      <Button color=\"teal\">\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button color=\"teal\" basic>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to=\"/login\" color=\"teal\" basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n\n  return (\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>{likeButton}</MyPopup>\n      <Label basic color=\"teal\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  );\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\nexport default LikeButton;\n","import gql from 'graphql-tag';\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport MyPopup from '../util/MyPopup';\n\nfunction DeleteButton({ postId, commentId, callback }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_POSTS_QUERY\n        });\n        data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      }\n      if (callback) callback();\n    },\n    variables: {\n      postId,\n      commentId\n    }\n  });\n  return (\n    <>\n      <MyPopup content={commentId ? 'Delete comment' : 'Delete post'}>\n        <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={() => setConfirmOpen(true)}\n        >\n          <Icon name=\"trash\" style={{ margin: 0 }} />\n        </Button>\n      </MyPopup>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from 'react';\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction PostCard({\n  post: { body, createdAt, id, username, likeCount, commentCount, likes }\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Image\n          floated=\"right\"\n          size=\"mini\"\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n        />\n        <Card.Header>{username}</Card.Header>\n        <Card.Meta as={Link} to={`/posts/${id}`}>\n          {moment(createdAt).fromNow(true)}\n        </Card.Meta>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\n        <MyPopup content=\"Comment on post\">\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n            <Button color=\"blue\" basic>\n              <Icon name=\"comments\" />\n            </Button>\n            <Label basic color=\"blue\" pointing=\"left\">\n              {commentCount}\n            </Label>\n          </Button>\n        </MyPopup>\n        {user && user.username === username && <DeleteButton postId={id} />}\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default PostCard;\n","import { useState } from 'react';\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const onChange = (event) => {\n    setValues({ ...values, [event.target.name]: event.target.value });\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    callback();\n  };\n\n  return {\n    onChange,\n    onSubmit,\n    values\n  };\n};\n","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: ''\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2>Create a post:</h2>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"Hi World!\"\n            name=\"body\"\n            onChange={onChange}\n            value={values.body}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"teal\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      createdAt\n      username\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;\n","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid, Transition } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction Home() {\n  const { user } = useContext(AuthContext);\n  const {\n    loading,\n    data: { getPosts: posts }\n  } = useQuery(FETCH_POSTS_QUERY);\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>Loading posts..</h1>\n        ) : (\n          <Transition.Group>\n            {posts &&\n              posts.map((post) => (\n                <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Login(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: '',\n    password: ''\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(\n      _,\n      {\n        data: { login: userData }\n      }\n    ) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n        <h1>Login</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>\n          Login\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Login;\n","import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Register(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(\n      _,\n      {\n        data: { register: userData }\n      }\n    ) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n        <h1>Register</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Email\"\n          placeholder=\"Email..\"\n          name=\"email\"\n          type=\"email\"\n          value={values.email}\n          error={errors.email ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password..\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          error={errors.confirmPassword ? true : false}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Register;\n","import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState('');\n\n  const {\n    data: { getPost }\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n  if (!getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <MyPopup content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => console.log('Comment on post')}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </MyPopup>\n                {user && user.username === username && (\n                  <DeleteButton postId={id} callback={deletePostCallback} />\n                )}\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(event) => setComment(event.target.value)}\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === ''}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments.map((comment) => (\n              <Card fluid key={comment.id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport App from './App';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { setContext } from 'apollo-link-context';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:5000'\n});\n\nconst authLink = setContext(() => {\n  const token = localStorage.getItem('jwtToken');\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}